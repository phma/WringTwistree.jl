using WringTwistree,Test

@test WringTwistree.findMaxOrder(85)==54
@test WringTwistree.findMaxOrder(1618034)==1000001
@test WringTwistree.findMaxOrder(1)==1

key96 = "Водворетраванатраведрова.Нерубидрованатраведвора!"
key30 = "Πάντοτε χαίρετε!"
key6 = "aerate"
# key96 is also used as a plaintext for hashing because 32|96.
text31 = "בראשית ברא אלהים " #-start of Bible
text33 = "árvíztűrő tükörfúrógépek"
wring96 = keyedWring(key96)
wring30 = keyedWring(key30)
wring6 = keyedWring(key6)
wring0 = keyedWring("")
twistree96 = keyedTwistree(key96)
twistree30 = keyedTwistree(key30)
twistree6 = keyedTwistree(key6)
twistree0 = keyedTwistree("")
text59049 = map(WringTwistree.xorn,collect(1:59049))

function testVectorWring(wring,plaintext,ciphertext)
  plaintext=Vector{UInt8}(plaintext)
  text=copy(plaintext)
  encrypt!(wring,text)
  ret=text==ciphertext
  if !ret
    println("Expected ciphertext: ",ciphertext,"\nGot: ",text)
  end
  decrypt!(wring,text)
  ret&=text==plaintext
  ret
end

function testVectorTwistree(twistree,plaintext,hashtext)
  plaintext=Vector{UInt8}(plaintext)
  initialize!(twistree)
  update!(twistree,plaintext)
  hash=finalize!(twistree)
  ret=hash==hashtext
  if !ret
    println("Expected hash: ",hashtext,"\nGot: ",hash)
  end
  ret
end

function testParallelWring(wring,plaintext)
  plaintext=Vector{UInt8}(plaintext)
  text=copy(plaintext)
  encryptSeq!(wring,text)
  decryptPar!(wring,text)
  ret=text==plaintext
  ret
end

#Test tails of rotBitcount
@test cycleRotBitcount([0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0])==(1,0)
@test cycleRotBitcount([0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1])==(64,0)
@test cycleRotBitcount([0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80])==(8,0)
@test cycleRotBitcount([0xfe,0xfd,0xfb,0xf7,0xef,0xdf,0xbf,0x7f])==(8,0)
@test cycleRotBitcount([0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe])==(64,0)
@test cycleRotBitcount([0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff])==(1,0)

#Test vectors for Wring
@test testVectorWring(wring0,[0,0,0,0,0,0,0,0],
		      [0x77,0x3e,0x34,0x8f,0x48,0xa1,0x24,0x1a])
@test testVectorWring(wring0,[255,255,255,255,255,255,255,255],
		      [0xc7,0xa7,0x58,0xed,0x5c,0x2b,0xb6,0xec])
@test testVectorWring(wring0,"Twistree",
		      [0xa3,0xcf,0xd4,0xa1,0x0d,0x7e,0xb7,0xb3])
@test testVectorWring(wring0,[0,0,0,0,0,0,0,0,0],
		      [0x10,0x10,0x95,0x96,0x90,0xb5,0x97,0xeb,0x38])
@test testVectorWring(wring0,[255,255,255,255,255,255,255,255,255],
		      [0x09,0x0f,0xf3,0x66,0x36,0xa4,0xac,0x8d,0x5c])
@test testVectorWring(wring0,"AllOrNone",
		      [0xee,0x15,0x02,0x05,0xdd,0xa9,0x77,0xe4,0x23])
@test testVectorWring(wring6,[0,0,0,0,0,0,0,0],
		      [0x23,0x44,0x2e,0x6e,0xf3,0xd7,0xa0,0x7e])
@test testVectorWring(wring6,[255,255,255,255,255,255,255,255],
		      [0x7e,0x05,0xae,0x5c,0x64,0xdd,0xf4,0xeb])
@test testVectorWring(wring6,"Twistree",
		      [0x36,0x39,0x14,0x22,0x40,0x7f,0xc3,0x79])
@test testVectorWring(wring6,[0,0,0,0,0,0,0,0,0],
		      [0x41,0xc1,0x44,0x0f,0x07,0x2d,0x92,0xbf,0x43])
@test testVectorWring(wring6,[255,255,255,255,255,255,255,255,255],
		      [0x46,0xb0,0x57,0x43,0xfb,0xdb,0x9d,0x32,0x88])
@test testVectorWring(wring6,"AllOrNone",
		      [0x5e,0x3b,0x49,0xd4,0xb8,0x70,0xdd,0x07,0xac])
@test testVectorWring(wring30,[0,0,0,0,0,0,0,0],
		      [0x90,0x4d,0x00,0x3e,0x39,0x75,0x9e,0xe4])
@test testVectorWring(wring30,[255,255,255,255,255,255,255,255],
		      [0x85,0x56,0x3d,0x4e,0x84,0x5a,0x14,0xe3])
@test testVectorWring(wring30,"Twistree",
		      [0x96,0x89,0x48,0x50,0x98,0x26,0xeb,0x03])
@test testVectorWring(wring30,[0,0,0,0,0,0,0,0,0],
		      [0x04,0xb0,0x1e,0xdf,0xd3,0xf0,0x39,0xa3,0x3c])
@test testVectorWring(wring30,[255,255,255,255,255,255,255,255,255],
		      [0x7c,0x67,0xeb,0xc8,0x40,0x97,0xc2,0x5f,0x82])
@test testVectorWring(wring30,"AllOrNone",
		      [0x4b,0xb2,0x68,0xe9,0xf1,0x64,0x0a,0x44,0xc4])
@test testVectorWring(wring96,[0,0,0,0,0,0,0,0],
		      [0x9c,0xc1,0x3c,0xe7,0x8a,0xc5,0x6f,0x18])
@test testVectorWring(wring96,[255,255,255,255,255,255,255,255],
		      [0x37,0x42,0x00,0x47,0xd5,0x2f,0x9d,0x7f])
@test testVectorWring(wring96,"Twistree",
		      [0x15,0x06,0xc6,0xa6,0x3d,0xef,0x19,0xf1])
@test testVectorWring(wring96,[0,0,0,0,0,0,0,0,0],
		      [0xd6,0x7b,0x2c,0xcc,0x71,0x24,0x5d,0x06,0x07])
@test testVectorWring(wring96,[255,255,255,255,255,255,255,255,255],
		      [0xd3,0xa8,0x3f,0xb6,0x9a,0x5e,0x0f,0x07,0x11])
@test testVectorWring(wring96,"AllOrNone",
		      [0x53,0x6c,0x7e,0x2d,0xcd,0xda,0xdc,0xf2,0x70])
@test testVectorWring(wring96,key96,
		      [ 0xed, 0xbb, 0x75, 0xc4, 0xb2, 0xc9, 0xd2, 0x82
		      , 0xa5, 0xbe, 0x37, 0x62, 0x4f, 0x5e, 0x7c, 0x1e 
		      , 0x22, 0x59, 0xca, 0x7a, 0x66, 0xb3, 0xa7, 0x91
		      , 0x34, 0xec, 0x50, 0x2e, 0x45, 0x3e, 0xc5, 0xc3
		      , 0xcc, 0xf3, 0xa3, 0x49, 0x72, 0x38, 0x3e, 0x5c
		      , 0xf6, 0x91, 0x44, 0x1c, 0x04, 0xf7, 0x80, 0x45 
		      , 0xdb, 0x9c, 0xcb, 0xe6, 0x08, 0xa2, 0x8d, 0x6a
		      , 0x5d, 0x28, 0x68, 0x93, 0x43, 0xa8, 0xb2, 0x65
		      , 0x2b, 0xc3, 0x1e, 0xa3, 0x70, 0xcc, 0x1e, 0x40
		      , 0xee, 0x7d, 0xa8, 0x19, 0x00, 0x72, 0x1e, 0x19 
		      , 0x46, 0xb1, 0x18, 0x6d, 0x9c, 0x7d, 0x88, 0x59
		      , 0x1b, 0x25, 0x01, 0x5d, 0x9d, 0xd7, 0x7c, 0x6d
		      ])

@test testVectorTwistree(twistree0,"",
			 [ 0x5b, 0x62, 0x5d, 0xeb, 0x4f, 0xa6, 0x92, 0xae
			 , 0x56, 0xf9, 0xba, 0x20, 0xf6, 0xb4, 0xc1, 0x05 
			 , 0xff, 0x92, 0x92, 0x3c, 0x7e, 0x84, 0xee, 0x2f
			 , 0x83, 0xc1, 0x0d, 0xc2, 0x8f, 0xda, 0xa3, 0x7b
			 ]);

@test testVectorTwistree(twistree0,text31,
			 [ 0x4c, 0xc9, 0x2e, 0x58, 0xf2, 0x80, 0xaf, 0x58
			 , 0x3e, 0x39, 0x6f, 0x3a, 0x9b, 0x7a, 0xdb, 0x59 
			 , 0x65, 0x63, 0xb1, 0x28, 0x96, 0x68, 0x29, 0x83
			 , 0xe4, 0x38, 0x1f, 0x79, 0x62, 0x78, 0x44, 0x0b
			 ]);

@test testVectorTwistree(twistree0,text33,
			 [ 0x3b, 0x8c, 0x2e, 0x6d, 0x7a, 0x29, 0x0a, 0x84
			 , 0xf4, 0x40, 0xe8, 0x37, 0xc9, 0xd5, 0x8c, 0x64 
			 , 0x11, 0x2a, 0x42, 0x17, 0x92, 0xd3, 0x33, 0xa0
			 , 0x24, 0xbe, 0xa3, 0x3f, 0x4a, 0x4b, 0x18, 0x1f
			 ]);

@test testVectorTwistree(twistree0,key96,
			 [ 0x4c, 0x19, 0x30, 0x4a, 0xae, 0x2a, 0x92, 0xba
			 , 0x9c, 0x05, 0x69, 0x37, 0xd7, 0xfc, 0x36, 0x2d 
			 , 0x29, 0x94, 0x8e, 0xdc, 0x3c, 0x56, 0x4f, 0x50
			 , 0x08, 0xa7, 0x5b, 0x0a, 0x06, 0x95, 0x90, 0xee
			 ]);

@test testVectorTwistree(twistree6,"",
			 [ 0x0a, 0x4b, 0x98, 0x44, 0x15, 0xe7, 0x8b, 0xe2
			 , 0xfe, 0xba, 0xf5, 0xe5, 0x51, 0x46, 0xe0, 0x05 
			 , 0xc8, 0x0c, 0x13, 0x6b, 0xfb, 0x2f, 0x6f, 0xa4
			 , 0xf6, 0x08, 0xbb, 0xa6, 0xe9, 0xf3, 0x35, 0xda
			 ]);

@test testVectorTwistree(twistree6,text31,
			 [ 0x73, 0xd6, 0xe9, 0xc0, 0x63, 0xd5, 0x3c, 0xec
			 , 0x4d, 0xd8, 0x3f, 0x89, 0x9f, 0x15, 0xf3, 0xf8 
			 , 0xe6, 0x7e, 0xfb, 0xc5, 0x46, 0x4e, 0x11, 0x60
			 , 0x9c, 0x0b, 0x75, 0xed, 0x35, 0x23, 0x56, 0x60
			 ]);

@test testVectorTwistree(twistree6,text33,
			 [ 0x77, 0x0b, 0xe3, 0xbe, 0xc4, 0x9c, 0xf9, 0xd0
			 , 0xd1, 0x46, 0xda, 0x03, 0xea, 0xe5, 0x60, 0x4e 
			 , 0x47, 0xec, 0xf1, 0x54, 0xe8, 0x6b, 0x63, 0x93
			 , 0x59, 0x52, 0xf0, 0x95, 0xb7, 0x32, 0x64, 0x0f
			 ]);

@test testVectorTwistree(twistree6,key96,
			 [ 0x00, 0x0a, 0x4c, 0x5e, 0x61, 0xd8, 0xb0, 0x14
			 , 0xfc, 0xe6, 0x46, 0xf9, 0xd3, 0x0f, 0xb2, 0x71 
			 , 0x43, 0x8c, 0xc4, 0x3f, 0x7f, 0x72, 0x0a, 0xfe
			 , 0xe1, 0xa3, 0xff, 0xd9, 0x5d, 0xe1, 0x65, 0x76
			 ]);

@test testVectorTwistree(twistree30,"",
			 [ 0x33, 0x69, 0xba, 0x2b, 0x72, 0x58, 0x6a, 0x78
			 , 0x6f, 0xc5, 0xd7, 0xbe, 0x3c, 0x80, 0xac, 0x24 
			 , 0x87, 0xb8, 0x6e, 0x2e, 0x1c, 0x4f, 0xee, 0x76
			 , 0x71, 0x49, 0x51, 0x7c, 0x58, 0xfb, 0x2e, 0x5a
			 ]);

@test testVectorTwistree(twistree30,text31,
			 [ 0xef, 0x78, 0x8f, 0x13, 0xb6, 0xb7, 0xd7, 0x9c
			 , 0xae, 0xce, 0xbe, 0x56, 0x80, 0x14, 0x4a, 0x37 
			 , 0x49, 0x26, 0xd6, 0x88, 0x69, 0x3e, 0x66, 0xd1
			 , 0xc6, 0xeb, 0x82, 0x37, 0x57, 0x53, 0xe1, 0x13
			 ]);

@test testVectorTwistree(twistree30,text33,
			 [ 0xf5, 0xde, 0x17, 0xa3, 0xc6, 0xde, 0x7e, 0x4f
			 , 0x17, 0xf6, 0xef, 0x3a, 0xe5, 0x7b, 0x1e, 0xc3 
			 , 0xa4, 0x9d, 0x9c, 0x7d, 0x85, 0x42, 0xf4, 0xb3
			 , 0xd4, 0x85, 0x94, 0x4d, 0x73, 0x98, 0x79, 0x80
			 ]);

@test testVectorTwistree(twistree30,key96,
			 [ 0x51, 0x35, 0x1a, 0xb4, 0x7b, 0x42, 0x96, 0xab
			 , 0x8c, 0xcd, 0xb7, 0xca, 0x12, 0x1b, 0xe2, 0x26 
			 , 0x73, 0x0e, 0x43, 0xd4, 0x42, 0x70, 0xd6, 0x93
			 , 0x0c, 0xee, 0xe2, 0xfe, 0x87, 0x88, 0x26, 0xee
			 ]);

@test testVectorTwistree(twistree96,"",
			 [ 0x4e, 0xfa, 0x85, 0x3a, 0xa1, 0xd2, 0x57, 0x43
			 , 0x87, 0x44, 0xf4, 0x37, 0x6d, 0x11, 0x40, 0x73 
			 , 0x38, 0x22, 0xc8, 0xd2, 0x2f, 0x0b, 0xb1, 0xba
			 , 0x06, 0x3b, 0x8e, 0x55, 0x54, 0x70, 0x76, 0x4c
			 ]);

@test testVectorTwistree(twistree96,text31,
			 [ 0xf9, 0x1d, 0x93, 0x79, 0x4e, 0x6e, 0xdd, 0x91
			 , 0x92, 0xcd, 0x47, 0xc4, 0xe8, 0xd2, 0xf9, 0xba 
			 , 0x0b, 0x5e, 0xca, 0x38, 0x92, 0xa8, 0xf9, 0x6e
			 , 0x2a, 0xdc, 0x49, 0xaa, 0x0c, 0x0b, 0x4d, 0xff
			 ]);

@test testVectorTwistree(twistree96,text33,
			 [ 0xde, 0x94, 0xa0, 0x0c, 0xf4, 0x4c, 0x5a, 0xe2
			 , 0xfb, 0xf7, 0x08, 0x3c, 0x9a, 0xdb, 0xda, 0x25 
			 , 0xa0, 0x2a, 0x01, 0xfb, 0x68, 0x81, 0x94, 0x88
			 , 0x8b, 0xc2, 0xbe, 0x1d, 0x6c, 0xae, 0x7b, 0x9c
			 ]);

@test testVectorTwistree(twistree96,key96,
			 [ 0xb1, 0x1b, 0x84, 0x9d, 0xf7, 0xb4, 0x15, 0xa3
			 , 0xf9, 0xdc, 0x69, 0x47, 0xe1, 0xd2, 0xc0, 0x20 
			 , 0x64, 0x0d, 0x8f, 0xf6, 0x79, 0xb6, 0x7b, 0x69
			 , 0xbc, 0x70, 0xe1, 0x2e, 0x3d, 0xd7, 0xeb, 0x57
			 ]);

# Test parallel Wring
@test testParallelWring(wring96,key96)

# Test parallel Twistree
@test testVectorTwistree(twistree96,text59049,
			 [ 0xd2, 0xe3, 0x0f, 0x01, 0xa0, 0x32, 0x27, 0x51
			 , 0x4e, 0x56, 0x44, 0xf1, 0x8f, 0x2e, 0x3e, 0xeb 
			 , 0xdb, 0x14, 0x30, 0xba, 0x96, 0x2c, 0x47, 0x24
			 , 0x4b, 0x79, 0x39, 0x58, 0xbc, 0x4f, 0x79, 0x25
			 ]);
